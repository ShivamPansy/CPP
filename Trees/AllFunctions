#include<bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node *right;
    Node *left;
    Node(int data){
        this->data = data;
        this->right = NULL;
        this->left = NULL;
    }
};

bool isLeaf(Node *root){
    if(!root->left && !root->right){
        return true;
    }
    else{
        return false;
    }
}

void inOrder(Node *root, vector<int>&result){
    if(isLeaf(root)){
        result.push_back(root->data);
        return;
    }
    if(root->left){
         inOrder(root->left, result);
    }
    if(root->right){
         inOrder(root->right, result);
    }
   
}

vector<int> boundaryTraversal(Node *root)
{
	// Write your code here.
	
    vector<int>result;
    if(root==NULL){
        return result;
    }
    queue<Node *>q;
    stack<int>st;
    q.push(root);
    while(q.empty()==false){
        int count = q.size();
        for(int i=0;i<count;i++){
            Node *front = q.front();
            q.pop();
            
            if(!front->left and !front->right){
                continue;
            }
            
            if(i==0){
                result.push_back(front->data);
            }

            if(i==count-1 and front != root){
                st.push(front->data);
            }

            if(front->left){
                q.push(front->left);
            }

            if(front->right){
                q.push(front->right);
            } 
        }
    }

    inOrder(root, result);

    while(st.empty()==false){
        result.push_back(st.top());
        st.pop();
    }

    return result;
    
}

int main()
{
    // Let us construct the tree given in the above diagram
    Node* root = new Node(20);
    root->left = new Node(8);
    root->left->left = new Node(4);
    root->left->right = new Node(12);
    root->left->right->left = new Node(10);
    root->left->right->right = new Node(14);
    root->right = new Node(22);
    root->right->right = new Node(25);
    // Node *root = new Node(1);
    // root->left = new Node(2);
    // root->left->left = new Node(3);
    // root->left->left->right = new Node(4);
    // root->left->left->right->left = new Node(5);
    // root->left->left->right->right = new Node(6);
    // root->right = new Node(7);
    // root->right->right = new Node(8);
    // root->right->right->left = new Node(9);
    // root->right->right->left->left = new Node(10);
    // root->right->right->left->right = new Node(11);
 
    vector<int> result = boundaryTraversal(root);
 
    cout<<"\n";
    for(auto x: result){
        cout<<x<<" ";
    }
}
