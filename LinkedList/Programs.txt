#include<bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* next;
    Node(int data){
        this->data = data;
        this->next = NULL;
    }
};

int lenList(Node* head){
    Node* curr = head;
    int len = 0;
    while(curr != NULL){
        curr=curr->next;
        len++;
    }
    return len;
}

int lenList(Node* head, int data){
    Node* curr = head;
    int len = 0;
    while(curr != NULL){
        len++;
        if(curr -> data == data){
            return len;
        }
        curr = curr->next;
    }
    
    return -1;
}

Node* deleteLastNode(Node* head){
    int len = lenList(head);
    int i=0;
    Node* curr = head;
    while(i<len-2){
        curr = curr ->next;
        i++;
    }
    
    curr->next = NULL;
    return head;
    
}

Node* deleteNthNode(Node* head, int data){
    if(head == NULL){
        return head;
    }
    int position = lenList(head, data);
    if(position == 1){
        head = head->next;
        return head;
    }
    if(position == -1){
        return head;
    }
    Node* curr = head;
    int i=0;
    while(i<position-2){
        curr = curr->next;
        i++;
    }
    curr->next = curr->next->next;
    return head;
}

int findMiddle(Node* head){
    int len = lenList(head);
    int result;
    Node* curr = head;
    
    int mid = len/2;
    int i=0;
    curr = head;
    while(i<mid){
        curr = curr->next;
        i++;
    }
    result = curr->data;
    return result;
}

int main(){
    Node* head = new Node(20);
    Node* head1 = new Node(40);
    Node* head2 = new Node(60);
    Node* head3 = new Node(80);
    
    head -> next = head1;
    head1-> next = head2;
    head2 -> next = head3;
    Node* curr = head;
    while(curr != NULL){
        cout<<curr->data<<" ";
        curr = curr -> next;
    }
    cout<<"\n";
    //Node* result = deleteLastNode(head);
    //int result = lenList(head, 60);
    Node* result = deleteNthNode(head, 20);
    
    cout<<"\n";
    while(result != NULL){
        cout<<result->data<<" ";
        result = result->next;
    }
    
    
}
